1704.判断字符串的两半是否相似


题目描述

给你一个偶数长度的字符串 s 。将其拆分成长度相同的两半，前一半为 a ，后一半为 b 。

两个字符串 相似 的前提是它们都含有相同数目的元音（'a'，'e'，'i'，'o'，'u'，'A'，'E'，'I'，'O'，'U'）。注意，s 可能同时含有大写和小写字母。

如果 a 和 b 相似，返回 true ；否则，返回 false 。


示例：

示例 1：

输入：s = "book"
输出：true
解释：a = "bo" 且 b = "ok" 。a 中有 1 个元音，b 也有 1 个元音。所以，a 和 b 相似。

示例 2：

输入：s = "textbook"
输出：false
解释：a = "text" 且 b = "book" 。a 中有 1 个元音，b 中有 2 个元音。因此，a 和 b 不相似。
注意，元音 o 在 b 中出现两次，记为 2 个。


思路

简单的进行比较计数就行，在这里一共提交了三个版本的代码。

1、写了一个函数，利用形参传递，形参传递的时进行了参数的拷贝，因此消耗了一定的内存。

2、利用函数进行地址传递，内存使用被优化，运行时间增加

3、不利用函数，同时优化了内存和时间，但是代码显得更加臃肿

总结：简单题，没啥好说的


核心代码

class Solution {
public:
    // int countNum(string& s, int start, int end) {
    //     int count = 0;
    //     for (int i = start; i < end; i++) {
    //         if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || 
    //             s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {
    //                 count++;
    //         }
    //     }
    //     return count;
    // }

    bool halvesAreAlike(string s) {
        int n = s.size();
        int idx = (n + 1) / 2;
        // if (countNum(s, 0, idx) == countNum(s, idx, n)) {
        //     return true;
        // }
        // return false;
        int countA = 0, countB = 0;
        for (int i = 0; i < idx; i++) {
            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || 
                s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {
                    countA++;
            }
        }
        for (int i = idx; i < n; i++) {
            if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || 
                s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {
                    countB++;
            }
        }
        return countA == countB ? true : false;
    }
};
